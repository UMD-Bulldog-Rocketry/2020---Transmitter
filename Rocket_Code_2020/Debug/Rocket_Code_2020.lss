
Rocket_Code_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000474  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000434  000008a8  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000484  000008f8  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004677  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bd  00000000  00000000  00024b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000134  00000000  00000000  000251e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000c8  00000000  00000000  0002531d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000253e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012309  00000000  00000000  00025475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002271  00000000  00000000  0003777e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e3a5  00000000  00000000  000399ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000002d8  00000000  00000000  000a7d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	88 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000474 	.word	0x00000474

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000474 	.word	0x00000474
 10c:	00000474 	.word	0x00000474
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	00000474 	.word	0x00000474
 1c8:	20000000 	.word	0x20000000
 1cc:	20000434 	.word	0x20000434
 1d0:	20000004 	.word	0x20000004
 1d4:	20000434 	.word	0x20000434
 1d8:	20000484 	.word	0x20000484
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	000002ad 	.word	0x000002ad
 1f8:	00000291 	.word	0x00000291

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
 200:	601a      	str	r2, [r3, #0]
        return;
}
 202:	4770      	bx	lr
 204:	000f4240 	.word	0x000f4240
 208:	20000000 	.word	0x20000000

0000020c <_Z15handleHardFaultv>:
 *3) Memory Write attempts that are misaligned
 *
 *This code should close all communications,
 *disable all ISRs, and run system critical code.
 */
void handleHardFault(){
 20c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while(currentInterruptIndex>0){
 20e:	4b0f      	ldr	r3, [pc, #60]	; (24c <_Z15handleHardFaultv+0x40>)
 210:	681b      	ldr	r3, [r3, #0]
 212:	2b00      	cmp	r3, #0
 214:	d019      	beq.n	24a <_Z15handleHardFaultv+0x3e>
		__NVIC_DisableIRQ(interrupts[currentInterruptIndex]);
 216:	4e0d      	ldr	r6, [pc, #52]	; (24c <_Z15handleHardFaultv+0x40>)
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 218:	251f      	movs	r5, #31
 21a:	2401      	movs	r4, #1
 21c:	480c      	ldr	r0, [pc, #48]	; (250 <_Z15handleHardFaultv+0x44>)
 21e:	2180      	movs	r1, #128	; 0x80
		currentInterruptIndex--;
 220:	0032      	movs	r2, r6
 222:	e004      	b.n	22e <_Z15handleHardFaultv+0x22>
 224:	6813      	ldr	r3, [r2, #0]
 226:	3b01      	subs	r3, #1
 228:	6013      	str	r3, [r2, #0]
	while(currentInterruptIndex>0){
 22a:	2b00      	cmp	r3, #0
 22c:	d00d      	beq.n	24a <_Z15handleHardFaultv+0x3e>
		__NVIC_DisableIRQ(interrupts[currentInterruptIndex]);
 22e:	18f3      	adds	r3, r6, r3
 230:	791b      	ldrb	r3, [r3, #4]
 232:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 234:	2b00      	cmp	r3, #0
 236:	dbf5      	blt.n	224 <_Z15handleHardFaultv+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 238:	402b      	ands	r3, r5
 23a:	0027      	movs	r7, r4
 23c:	409f      	lsls	r7, r3
 23e:	5047      	str	r7, [r0, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 244:	f3bf 8f6f 	isb	sy
 248:	e7ec      	b.n	224 <_Z15handleHardFaultv+0x18>
 24a:	e7fe      	b.n	24a <_Z15handleHardFaultv+0x3e>
 24c:	20000450 	.word	0x20000450
 250:	e000e100 	.word	0xe000e100

00000254 <_Z17registerHardFaultv>:
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  uint32_t *vectors = (uint32_t *)SCB->VTOR;
 254:	4b02      	ldr	r3, [pc, #8]	; (260 <_Z17registerHardFaultv+0xc>)
 256:	689b      	ldr	r3, [r3, #8]
#else
    uint32_t *vectors = (uint32_t *)0x0U;
#endif
  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 258:	4a02      	ldr	r2, [pc, #8]	; (264 <_Z17registerHardFaultv+0x10>)
 25a:	60da      	str	r2, [r3, #12]
/*Registers a hard Fault in the interrupt system.
* This should be the first thing called after SystemInit()*/
void registerHardFault(){
	__NVIC_SetVector(HardFault_IRQn, ((uint32_t) *handleHardFault));
	__NVIC_EnableIRQ(HardFault_IRQn);
 25c:	4770      	bx	lr
 25e:	46c0      	nop			; (mov r8, r8)
 260:	e000ed00 	.word	0xe000ed00
 264:	0000020d 	.word	0x0000020d

00000268 <_Z13handleSysTickv>:
//Is called once every 10ms.
//Clock budget: 4,799,900 cycles.
void handleSysTick(){
	//TODO:
	__NVIC_ClearPendingIRQ(SysTick_IRQn); //Acknowledge the interrupt
 268:	4770      	bx	lr
	...

0000026c <_Z15registerSysTickv>:
	SysTick->CTRL = 0x05;
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <_Z15registerSysTickv+0x14>)
 26e:	2205      	movs	r2, #5
 270:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = SYSTICK_INTERVAL_CYCLES;
 272:	4a04      	ldr	r2, [pc, #16]	; (284 <_Z15registerSysTickv+0x18>)
 274:	605a      	str	r2, [r3, #4]
  uint32_t *vectors = (uint32_t *)SCB->VTOR;
 276:	4b04      	ldr	r3, [pc, #16]	; (288 <_Z15registerSysTickv+0x1c>)
 278:	689b      	ldr	r3, [r3, #8]
  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 27a:	4a04      	ldr	r2, [pc, #16]	; (28c <_Z15registerSysTickv+0x20>)
 27c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 27e:	4770      	bx	lr
 280:	e000e010 	.word	0xe000e010
 284:	000752ff 	.word	0x000752ff
 288:	e000ed00 	.word	0xe000ed00
 28c:	00000269 	.word	0x00000269

00000290 <main>:




int main(void)
{
 290:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <main+0x10>)
 294:	4798      	blx	r3
	registerHardFault();
 296:	4b03      	ldr	r3, [pc, #12]	; (2a4 <main+0x14>)
 298:	4798      	blx	r3
	//ConfigureSERCOM2();
	//registerSercom2();
	registerSysTick();	
 29a:	4b03      	ldr	r3, [pc, #12]	; (2a8 <main+0x18>)
 29c:	4798      	blx	r3
 29e:	e7fe      	b.n	29e <main+0xe>
 2a0:	000001fd 	.word	0x000001fd
 2a4:	00000255 	.word	0x00000255
 2a8:	0000026d 	.word	0x0000026d

000002ac <__libc_init_array>:
 2ac:	b570      	push	{r4, r5, r6, lr}
 2ae:	4e0d      	ldr	r6, [pc, #52]	; (2e4 <__libc_init_array+0x38>)
 2b0:	4d0d      	ldr	r5, [pc, #52]	; (2e8 <__libc_init_array+0x3c>)
 2b2:	2400      	movs	r4, #0
 2b4:	1bad      	subs	r5, r5, r6
 2b6:	10ad      	asrs	r5, r5, #2
 2b8:	d005      	beq.n	2c6 <__libc_init_array+0x1a>
 2ba:	00a3      	lsls	r3, r4, #2
 2bc:	58f3      	ldr	r3, [r6, r3]
 2be:	3401      	adds	r4, #1
 2c0:	4798      	blx	r3
 2c2:	42a5      	cmp	r5, r4
 2c4:	d1f9      	bne.n	2ba <__libc_init_array+0xe>
 2c6:	f000 f8c3 	bl	450 <_init>
 2ca:	4e08      	ldr	r6, [pc, #32]	; (2ec <__libc_init_array+0x40>)
 2cc:	4d08      	ldr	r5, [pc, #32]	; (2f0 <__libc_init_array+0x44>)
 2ce:	2400      	movs	r4, #0
 2d0:	1bad      	subs	r5, r5, r6
 2d2:	10ad      	asrs	r5, r5, #2
 2d4:	d005      	beq.n	2e2 <__libc_init_array+0x36>
 2d6:	00a3      	lsls	r3, r4, #2
 2d8:	58f3      	ldr	r3, [r6, r3]
 2da:	3401      	adds	r4, #1
 2dc:	4798      	blx	r3
 2de:	42a5      	cmp	r5, r4
 2e0:	d1f9      	bne.n	2d6 <__libc_init_array+0x2a>
 2e2:	bd70      	pop	{r4, r5, r6, pc}
 2e4:	0000045c 	.word	0x0000045c
 2e8:	0000045c 	.word	0x0000045c
 2ec:	0000045c 	.word	0x0000045c
 2f0:	00000464 	.word	0x00000464

000002f4 <register_fini>:
 2f4:	4b03      	ldr	r3, [pc, #12]	; (304 <register_fini+0x10>)
 2f6:	b510      	push	{r4, lr}
 2f8:	2b00      	cmp	r3, #0
 2fa:	d002      	beq.n	302 <register_fini+0xe>
 2fc:	4802      	ldr	r0, [pc, #8]	; (308 <register_fini+0x14>)
 2fe:	f000 f805 	bl	30c <atexit>
 302:	bd10      	pop	{r4, pc}
 304:	00000000 	.word	0x00000000
 308:	0000031d 	.word	0x0000031d

0000030c <atexit>:
 30c:	b510      	push	{r4, lr}
 30e:	0001      	movs	r1, r0
 310:	2300      	movs	r3, #0
 312:	2200      	movs	r2, #0
 314:	2000      	movs	r0, #0
 316:	f000 f81f 	bl	358 <__register_exitproc>
 31a:	bd10      	pop	{r4, pc}

0000031c <__libc_fini_array>:
 31c:	b570      	push	{r4, r5, r6, lr}
 31e:	4b09      	ldr	r3, [pc, #36]	; (344 <__libc_fini_array+0x28>)
 320:	4c09      	ldr	r4, [pc, #36]	; (348 <__libc_fini_array+0x2c>)
 322:	1ae4      	subs	r4, r4, r3
 324:	10a4      	asrs	r4, r4, #2
 326:	d009      	beq.n	33c <__libc_fini_array+0x20>
 328:	4a08      	ldr	r2, [pc, #32]	; (34c <__libc_fini_array+0x30>)
 32a:	18a5      	adds	r5, r4, r2
 32c:	00ad      	lsls	r5, r5, #2
 32e:	18ed      	adds	r5, r5, r3
 330:	682b      	ldr	r3, [r5, #0]
 332:	3c01      	subs	r4, #1
 334:	4798      	blx	r3
 336:	3d04      	subs	r5, #4
 338:	2c00      	cmp	r4, #0
 33a:	d1f9      	bne.n	330 <__libc_fini_array+0x14>
 33c:	f000 f892 	bl	464 <_fini>
 340:	bd70      	pop	{r4, r5, r6, pc}
 342:	46c0      	nop			; (mov r8, r8)
 344:	00000470 	.word	0x00000470
 348:	00000474 	.word	0x00000474
 34c:	3fffffff 	.word	0x3fffffff

00000350 <__retarget_lock_acquire_recursive>:
 350:	4770      	bx	lr
 352:	46c0      	nop			; (mov r8, r8)

00000354 <__retarget_lock_release_recursive>:
 354:	4770      	bx	lr
 356:	46c0      	nop			; (mov r8, r8)

00000358 <__register_exitproc>:
 358:	b5f0      	push	{r4, r5, r6, r7, lr}
 35a:	464e      	mov	r6, r9
 35c:	4645      	mov	r5, r8
 35e:	46de      	mov	lr, fp
 360:	4657      	mov	r7, sl
 362:	b5e0      	push	{r5, r6, r7, lr}
 364:	4d36      	ldr	r5, [pc, #216]	; (440 <__register_exitproc+0xe8>)
 366:	b083      	sub	sp, #12
 368:	0006      	movs	r6, r0
 36a:	6828      	ldr	r0, [r5, #0]
 36c:	4698      	mov	r8, r3
 36e:	000f      	movs	r7, r1
 370:	4691      	mov	r9, r2
 372:	f7ff ffed 	bl	350 <__retarget_lock_acquire_recursive>
 376:	4b33      	ldr	r3, [pc, #204]	; (444 <__register_exitproc+0xec>)
 378:	681c      	ldr	r4, [r3, #0]
 37a:	23a4      	movs	r3, #164	; 0xa4
 37c:	005b      	lsls	r3, r3, #1
 37e:	58e0      	ldr	r0, [r4, r3]
 380:	2800      	cmp	r0, #0
 382:	d052      	beq.n	42a <__register_exitproc+0xd2>
 384:	6843      	ldr	r3, [r0, #4]
 386:	2b1f      	cmp	r3, #31
 388:	dc13      	bgt.n	3b2 <__register_exitproc+0x5a>
 38a:	1c5a      	adds	r2, r3, #1
 38c:	9201      	str	r2, [sp, #4]
 38e:	2e00      	cmp	r6, #0
 390:	d128      	bne.n	3e4 <__register_exitproc+0x8c>
 392:	9a01      	ldr	r2, [sp, #4]
 394:	3302      	adds	r3, #2
 396:	009b      	lsls	r3, r3, #2
 398:	6042      	str	r2, [r0, #4]
 39a:	501f      	str	r7, [r3, r0]
 39c:	6828      	ldr	r0, [r5, #0]
 39e:	f7ff ffd9 	bl	354 <__retarget_lock_release_recursive>
 3a2:	2000      	movs	r0, #0
 3a4:	b003      	add	sp, #12
 3a6:	bc3c      	pop	{r2, r3, r4, r5}
 3a8:	4690      	mov	r8, r2
 3aa:	4699      	mov	r9, r3
 3ac:	46a2      	mov	sl, r4
 3ae:	46ab      	mov	fp, r5
 3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 3b2:	4b25      	ldr	r3, [pc, #148]	; (448 <__register_exitproc+0xf0>)
 3b4:	2b00      	cmp	r3, #0
 3b6:	d03d      	beq.n	434 <__register_exitproc+0xdc>
 3b8:	20c8      	movs	r0, #200	; 0xc8
 3ba:	0040      	lsls	r0, r0, #1
 3bc:	e000      	b.n	3c0 <__register_exitproc+0x68>
 3be:	bf00      	nop
 3c0:	2800      	cmp	r0, #0
 3c2:	d037      	beq.n	434 <__register_exitproc+0xdc>
 3c4:	22a4      	movs	r2, #164	; 0xa4
 3c6:	2300      	movs	r3, #0
 3c8:	0052      	lsls	r2, r2, #1
 3ca:	58a1      	ldr	r1, [r4, r2]
 3cc:	6043      	str	r3, [r0, #4]
 3ce:	6001      	str	r1, [r0, #0]
 3d0:	50a0      	str	r0, [r4, r2]
 3d2:	3240      	adds	r2, #64	; 0x40
 3d4:	5083      	str	r3, [r0, r2]
 3d6:	3204      	adds	r2, #4
 3d8:	5083      	str	r3, [r0, r2]
 3da:	3301      	adds	r3, #1
 3dc:	9301      	str	r3, [sp, #4]
 3de:	2300      	movs	r3, #0
 3e0:	2e00      	cmp	r6, #0
 3e2:	d0d6      	beq.n	392 <__register_exitproc+0x3a>
 3e4:	009a      	lsls	r2, r3, #2
 3e6:	4692      	mov	sl, r2
 3e8:	4482      	add	sl, r0
 3ea:	464a      	mov	r2, r9
 3ec:	2188      	movs	r1, #136	; 0x88
 3ee:	4654      	mov	r4, sl
 3f0:	5062      	str	r2, [r4, r1]
 3f2:	22c4      	movs	r2, #196	; 0xc4
 3f4:	0052      	lsls	r2, r2, #1
 3f6:	4691      	mov	r9, r2
 3f8:	4481      	add	r9, r0
 3fa:	464a      	mov	r2, r9
 3fc:	3987      	subs	r1, #135	; 0x87
 3fe:	4099      	lsls	r1, r3
 400:	6812      	ldr	r2, [r2, #0]
 402:	468b      	mov	fp, r1
 404:	430a      	orrs	r2, r1
 406:	4694      	mov	ip, r2
 408:	464a      	mov	r2, r9
 40a:	4661      	mov	r1, ip
 40c:	6011      	str	r1, [r2, #0]
 40e:	2284      	movs	r2, #132	; 0x84
 410:	4641      	mov	r1, r8
 412:	0052      	lsls	r2, r2, #1
 414:	50a1      	str	r1, [r4, r2]
 416:	2e02      	cmp	r6, #2
 418:	d1bb      	bne.n	392 <__register_exitproc+0x3a>
 41a:	0002      	movs	r2, r0
 41c:	465c      	mov	r4, fp
 41e:	328d      	adds	r2, #141	; 0x8d
 420:	32ff      	adds	r2, #255	; 0xff
 422:	6811      	ldr	r1, [r2, #0]
 424:	430c      	orrs	r4, r1
 426:	6014      	str	r4, [r2, #0]
 428:	e7b3      	b.n	392 <__register_exitproc+0x3a>
 42a:	0020      	movs	r0, r4
 42c:	304d      	adds	r0, #77	; 0x4d
 42e:	30ff      	adds	r0, #255	; 0xff
 430:	50e0      	str	r0, [r4, r3]
 432:	e7a7      	b.n	384 <__register_exitproc+0x2c>
 434:	6828      	ldr	r0, [r5, #0]
 436:	f7ff ff8d 	bl	354 <__retarget_lock_release_recursive>
 43a:	2001      	movs	r0, #1
 43c:	4240      	negs	r0, r0
 43e:	e7b1      	b.n	3a4 <__register_exitproc+0x4c>
 440:	20000430 	.word	0x20000430
 444:	0000044c 	.word	0x0000044c
 448:	00000000 	.word	0x00000000

0000044c <_global_impure_ptr>:
 44c:	20000008                                ... 

00000450 <_init>:
 450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 452:	46c0      	nop			; (mov r8, r8)
 454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 456:	bc08      	pop	{r3}
 458:	469e      	mov	lr, r3
 45a:	4770      	bx	lr

0000045c <__init_array_start>:
 45c:	000002f5 	.word	0x000002f5

00000460 <__frame_dummy_init_array_entry>:
 460:	000000dd                                ....

00000464 <_fini>:
 464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 466:	46c0      	nop			; (mov r8, r8)
 468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 46a:	bc08      	pop	{r3}
 46c:	469e      	mov	lr, r3
 46e:	4770      	bx	lr

00000470 <__fini_array_start>:
 470:	000000b5 	.word	0x000000b5
